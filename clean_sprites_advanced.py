#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üßπ Nettoyage Avanc√© des Sprites - Suppression des contours blancs
Script pour nettoyer compl√®tement les sprites et supprimer tous les artefacts
"""

import os
from pathlib import Path
import numpy as np
from PIL import Image, ImageFilter, ImageEnhance

def analyze_sprite_edges(image_path):
    """Analyse les bords du sprite pour d√©tecter les artefacts"""
    
    with Image.open(image_path).convert("RGBA") as img:
        data = np.array(img)
        
        print(f"\nüîç Analyse de {Path(image_path).name}:")
        print(f"   Taille: {img.size}")
        
        # Analyser les coins
        corners = {
            'top-left': data[0, 0],
            'top-right': data[0, -1],
            'bottom-left': data[-1, 0],
            'bottom-right': data[-1, -1]
        }
        
        for corner, color in corners.items():
            r, g, b, a = color
            print(f"   {corner}: RGBA({r}, {g}, {b}, {a})")
        
        # D√©tecter les pixels blancs/gris clairs
        white_pixels = np.sum((data[:,:,0] > 240) & (data[:,:,1] > 240) & (data[:,:,2] > 240) & (data[:,:,3] > 0))
        total_pixels = data.shape[0] * data.shape[1]
        
        print(f"   Pixels blancs: {white_pixels}/{total_pixels} ({white_pixels/total_pixels*100:.1f}%)")
        
        return corners, white_pixels

def clean_sprite_advanced(input_path, output_path):
    """Nettoyage avanc√© d'un sprite"""
    
    with Image.open(input_path).convert("RGBA") as img:
        data = np.array(img)
        
        print(f"\nüßπ Nettoyage de {Path(input_path).name}...")
        
        # 1. D√©tecter la couleur de fond dominante dans les coins
        corners = [
            data[0, 0],      # top-left
            data[0, -1],     # top-right  
            data[-1, 0],     # bottom-left
            data[-1, -1]     # bottom-right
        ]
        
        # Couleurs √† supprimer (fond + blanc/gris clair)
        colors_to_remove = []
        
        # Ajouter les couleurs des coins si elles sont uniformes
        for corner in corners:
            r, g, b, a = corner
            if a > 0:  # Si pas d√©j√† transparent
                colors_to_remove.append((r, g, b))
        
        # Ajouter toutes les nuances de blanc/gris clair
        for threshold in [255, 250, 245, 240, 235, 230, 220, 210]:
            colors_to_remove.append((threshold, threshold, threshold))
        
        print(f"   Couleurs √† supprimer: {len(colors_to_remove)}")
        
        # 2. Supprimer les couleurs de fond avec tol√©rance
        tolerance = 20
        
        for r_target, g_target, b_target in colors_to_remove:
            # Cr√©er un masque pour les pixels similaires
            mask = (
                (np.abs(data[:,:,0].astype(int) - r_target) <= tolerance) &
                (np.abs(data[:,:,1].astype(int) - g_target) <= tolerance) &
                (np.abs(data[:,:,2].astype(int) - b_target) <= tolerance)
            )
            
            # Rendre ces pixels transparents
            data[mask, 3] = 0
        
        # 3. Nettoyage des contours (anti-aliasing ind√©sirable)
        # Supprimer les pixels semi-transparents aux bords
        edge_mask = (data[:,:,3] > 0) & (data[:,:,3] < 128)  # Pixels semi-transparents
        
        # V√©rifier si ces pixels sont aux bords ou isol√©s
        for y in range(data.shape[0]):
            for x in range(data.shape[1]):
                if edge_mask[y, x]:
                    # Compter les voisins opaques
                    neighbors_opaque = 0
                    for dy in [-1, 0, 1]:
                        for dx in [-1, 0, 1]:
                            ny, nx = y + dy, x + dx
                            if 0 <= ny < data.shape[0] and 0 <= nx < data.shape[1]:
                                if data[ny, nx, 3] > 200:  # Voisin opaque
                                    neighbors_opaque += 1
                    
                    # Si moins de 3 voisins opaques, supprimer le pixel
                    if neighbors_opaque < 3:
                        data[y, x, 3] = 0
        
        # 4. Am√©liorer le contraste du sprite restant
        # Seulement sur les pixels non-transparents
        opaque_mask = data[:,:,3] > 128
        
        if np.any(opaque_mask):
            # Augmenter l√©g√®rement le contraste
            for c in range(3):  # RGB
                channel = data[:,:,c][opaque_mask].astype(float)
                if len(channel) > 0:
                    # Normaliser et am√©liorer le contraste
                    channel = np.clip(channel * 1.1 - 5, 0, 255)
                    data[:,:,c][opaque_mask] = channel.astype(np.uint8)
        
        # 5. Redimensionner proprement √† 80x80
        cleaned_img = Image.fromarray(data, 'RGBA')
        
        # Redimensionnement avec anti-aliasing de qualit√©
        resized_img = cleaned_img.resize((80, 80), Image.Resampling.LANCZOS)
        
        # 6. Post-traitement final - supprimer les artefacts de redimensionnement
        final_data = np.array(resized_img)
        
        # Supprimer les pixels tr√®s faiblement opaques cr√©√©s par le redimensionnement
        weak_alpha_mask = (final_data[:,:,3] > 0) & (final_data[:,:,3] < 50)
        final_data[weak_alpha_mask, 3] = 0
        
        # Renforcer les pixels moyennement opaques
        medium_alpha_mask = (final_data[:,:,3] >= 50) & (final_data[:,:,3] < 200)
        final_data[medium_alpha_mask, 3] = 255
        
        final_img = Image.fromarray(final_data, 'RGBA')
        final_img.save(output_path, 'PNG', optimize=True)
        
        # Statistiques
        original_pixels = np.sum(np.array(Image.open(input_path).convert("RGBA"))[:,:,3] > 0)
        final_pixels = np.sum(final_data[:,:,3] > 0)
        
        print(f"   ‚úÖ Nettoy√©: {original_pixels} ‚Üí {final_pixels} pixels opaques")
        
        return True

def clean_sprite_advanced(image_path, output_path=None):
    """Nettoie compl√®tement un sprite en supprimant tous les r√©sidus blancs"""
    
    if output_path is None:
        output_path = image_path
    
    print(f"üßπ Nettoyage avanc√©: {image_path}")
    
    try:
        # Charger l'image
        with Image.open(image_path) as img:
            # Convertir en RGBA si n√©cessaire
            if img.mode != 'RGBA':
                img = img.convert('RGBA')
            
            # Convertir en array numpy pour traitement
            data = np.array(img)
            
            # Taille originale
            original_size = data.shape[:2]
            print(f"   üìê Taille originale: {original_size[1]}x{original_size[0]}")
            
            # 1. Supprimer les pixels blancs et quasi-blancs
            # D√©finir ce qu'est "blanc" (RGB proche de 255,255,255)
            white_threshold = 240
            is_white = (
                (data[:,:,0] >= white_threshold) & 
                (data[:,:,1] >= white_threshold) & 
                (data[:,:,2] >= white_threshold)
            )
            
            # Rendre transparents les pixels blancs
            data[is_white] = [0, 0, 0, 0]
            
            # 2. Supprimer les pixels gris tr√®s clairs (r√©sidus)
            gray_threshold = 220
            is_light_gray = (
                (data[:,:,0] >= gray_threshold) & 
                (data[:,:,1] >= gray_threshold) & 
                (data[:,:,2] >= gray_threshold) &
                (data[:,:,0] == data[:,:,1]) &  # Vraiment gris (composantes √©gales)
                (data[:,:,1] == data[:,:,2])
            )
            data[is_light_gray] = [0, 0, 0, 0]
            
            # 3. Detecter les contours et nettoyer
            # Cr√©er un masque des pixels non-transparents
            alpha_mask = data[:,:,3] > 50  # Pixels avec un minimum d'opacit√©
            
            # 4. Crop automatique pour enlever les bordures vides
            if np.any(alpha_mask):
                # Trouver les limites du contenu
                rows = np.any(alpha_mask, axis=1)
                cols = np.any(alpha_mask, axis=0)
                
                if np.any(rows) and np.any(cols):
                    top, bottom = np.where(rows)[0][[0, -1]]
                    left, right = np.where(cols)[0][[0, -1]]
                    
                    # Ajouter un petit padding
                    padding = 2
                    top = max(0, top - padding)
                    left = max(0, left - padding)
                    bottom = min(data.shape[0] - 1, bottom + padding)
                    right = min(data.shape[1] - 1, right + padding)
                    
                    # Crop l'image
                    cropped_data = data[top:bottom+1, left:right+1]
                    print(f"   ‚úÇÔ∏è Crop: {right-left+1}x{bottom-top+1}")
                else:
                    cropped_data = data
            else:
                print("   ‚ö†Ô∏è Image enti√®rement transparente!")
                cropped_data = data
            
            # 5. Redimensionner √† 80x80 avec padding intelligent
            target_size = 80
            cropped_img = Image.fromarray(cropped_data, 'RGBA')
            
            # Calculer les dimensions finales en gardant les proportions
            original_w, original_h = cropped_img.size
            aspect_ratio = original_w / original_h
            
            if aspect_ratio > 1:  # Plus large que haut
                new_w = target_size
                new_h = int(target_size / aspect_ratio)
            else:  # Plus haut que large
                new_h = target_size
                new_w = int(target_size * aspect_ratio)
            
            # Redimensionner avec antialiasing
            resized = cropped_img.resize((new_w, new_h), Image.Resampling.LANCZOS)
            
            # 6. Centrer sur un canvas 80x80 transparent
            final_img = Image.new('RGBA', (target_size, target_size), (0, 0, 0, 0))
            
            # Calculer la position pour centrer
            paste_x = (target_size - new_w) // 2
            paste_y = (target_size - new_h) // 2
            
            final_img.paste(resized, (paste_x, paste_y), resized)
            
            # 7. Post-traitement final
            # Am√©liorer la nettet√©
            enhancer = ImageEnhance.Sharpness(final_img)
            final_img = enhancer.enhance(1.2)
            
            # 8. Sauvegarder avec compression optimale
            final_img.save(output_path, 'PNG', optimize=True)
            
            print(f"   ‚úÖ Nettoy√© et sauv√©: {new_w}x{new_h} ‚Üí 80x80")
            return True
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def clean_all_ninja_sprites():
    """Nettoie tous les sprites ninja"""
    
    print("üé® NETTOYAGE AVANC√â DES SPRITES NINJA")
    print("=" * 50)
    
    assets_dir = Path('./assets/characters')
    
    # Cr√©er un dossier pour les sprites nettoy√©s
    cleaned_dir = assets_dir / 'cleaned'
    cleaned_dir.mkdir(exist_ok=True)
    
    # Liste des sprites ninja
    ninja_files = list(assets_dir.glob('ninja_*.png'))
    
    if not ninja_files:
        print("‚ùå Aucun sprite ninja trouv√©!")
        return False
    
    print(f"üìÅ Trouv√© {len(ninja_files)} sprites ninja √† nettoyer")
    
    success_count = 0
    
    for sprite_file in ninja_files:
        # Nettoyer vers le dossier cleaned
        output_file = cleaned_dir / sprite_file.name
        
        if clean_sprite_advanced(sprite_file, output_file):
            success_count += 1
    
    print(f"\nüìä R√âSULTATS:")
    print(f"   ‚úÖ Sprites nettoy√©s: {success_count}/{len(ninja_files)}")
    print(f"   üìÅ Sauv√©s dans: {cleaned_dir}")
    
    if success_count == len(ninja_files):
        print(f"\nüéâ Tous les sprites ont √©t√© nettoy√©s avec succ√®s!")
        print(f"üí° Copiez maintenant les sprites nettoy√©s:")
        print(f"   copy {cleaned_dir}\\*.png {assets_dir}")
        return True
    else:
        print(f"\n‚ö†Ô∏è Quelques sprites n'ont pas pu √™tre nettoy√©s")
        return False

def analyze_sprite_issues():
    """Analyse les probl√®mes potentiels des sprites"""
    
    print("üîç ANALYSE DES SPRITES ACTUELS")
    print("=" * 40)
    
    assets_dir = Path('./assets/characters')
    ninja_files = list(assets_dir.glob('ninja_*.png'))
    
    issues_found = []
    
    for sprite_file in ninja_files:
        try:
            with Image.open(sprite_file) as img:
                if img.mode != 'RGBA':
                    img = img.convert('RGBA')
                
                data = np.array(img)
                
                # V√©rifier les pixels blancs
                white_pixels = np.sum(
                    (data[:,:,0] > 240) & 
                    (data[:,:,1] > 240) & 
                    (data[:,:,2] > 240) &
                    (data[:,:,3] > 0)  # Non transparents
                )
                
                # V√©rifier les bordures
                border_has_content = (
                    np.any(data[0,:,3] > 0) or   # Top
                    np.any(data[-1,:,3] > 0) or  # Bottom
                    np.any(data[:,0,3] > 0) or   # Left
                    np.any(data[:,-1,3] > 0)     # Right
                )
                
                issues = []
                if white_pixels > 0:
                    issues.append(f"{white_pixels} pixels blancs")
                if border_has_content:
                    issues.append("contenu sur les bordures")
                
                if issues:
                    issues_found.append(f"{sprite_file.name}: {', '.join(issues)}")
                else:
                    print(f"   ‚úÖ {sprite_file.name}")
                    
        except Exception as e:
            issues_found.append(f"{sprite_file.name}: Erreur - {e}")
    
    if issues_found:
        print(f"\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS:")
        for issue in issues_found:
            print(f"   - {issue}")
        return False
    else:
        print(f"\nüéâ Tous les sprites semblent propres!")
        return True

if __name__ == "__main__":
    print("üé® OUTIL DE NETTOYAGE AVANC√â DES SPRITES")
    print("=" * 60)
    
    # D'abord analyser les probl√®mes
    print("1Ô∏è‚É£ Analyse des sprites actuels...")
    has_issues = not analyze_sprite_issues()
    
    if has_issues:
        print("\n2Ô∏è‚É£ Nettoyage des sprites...")
        success = clean_all_ninja_sprites()
        
        if success:
            print(f"\nüöÄ √âTAPES SUIVANTES:")
            print(f"1. Copier les sprites nettoy√©s:")
            print(f"   copy assets\\characters\\cleaned\\*.png assets\\characters\\")
            print(f"2. Recharger le jeu pour voir la diff√©rence!")
        else:
            print(f"\n‚ùå Le nettoyage a √©chou√©")
    else:
        print(f"\n‚úÖ Aucun nettoyage n√©cessaire - les sprites sont d√©j√† propres!")